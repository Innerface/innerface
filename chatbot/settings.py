"""
Django settings for chatbot project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import configparser
import pymongo
import pickle
import pathlib
import traceback
import redis
from tools.decrypt import AESCipher
import gensim
import jieba

from DBUtils.PooledDB import PooledDB
import pymysql

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PICKLE_DIR = pathlib.Path(BASE_DIR)/'static'/'pickle'

config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR, 'chatbot.conf'))
keyMaterial = config.get("crypto", "keymaterial")
secondkey = config.get("crypto", "key")
AESProcess = AESCipher(keyMaterial, secondkey)
vendor_is_use = config.get("vendor_module", "is_use")


# pickle
SYNONYMS_FILE = open(PICKLE_DIR / 'synonyms.pickle', "rb+")
SYNONYMS = pickle.load(SYNONYMS_FILE)
ONTOLOGY_FILE = open(PICKLE_DIR / 'ontology_keywords.pickle', "rb+")
ONTOLOGY = pickle.load(ONTOLOGY_FILE)
ATTR_FILE = open(PICKLE_DIR / 'attr_keywords.pickle', "rb+")
ATTR = pickle.load(ATTR_FILE)

# word2vec
WORD2VECMODEL = gensim.models.Word2Vec.load(BASE_DIR+"/vendor/dataset/wordVec/faq/faq_origin.model")
WORD2VECMODEL.init_sims(replace=True)

# jieba
jieba.load_userdict(BASE_DIR + "/vendor/dataset/chinese/candidatesAll.txt")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tbc-kqx7l#$bun(**e9!2+eu($a4vvw4o-g*18e5b9(#7%r4o9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

LOGIN_URL = 'login'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sdisplay',
    'suser',
    'data_admin',
]
if vendor_is_use:
    INSTALLED_APPS.append('vendor')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chatbot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DB_HOST = config.get('db', 'host')
DB_PORT = config.getint('db', 'port')
DB_USER = config.get('db', 'user')
DB_PASSWORD_TEMP = config.get('db', 'password')
DB_PASSWORD = AESProcess.decryptkey(DB_PASSWORD_TEMP).decode()
DB_DATABASE_TEMP = config.get('db', 'database')
DB_DATABASE = AESProcess.decryptkey(DB_DATABASE_TEMP).decode()
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_DATABASE,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}


class MongoConn(object):
    def __init__(self):
        # connect db
        try:
            self.conn = pymongo.MongoClient(config.get('mongodb', 'host'), int(config.get('mongodb', 'port')))
            self.db = self.conn[config.get('mongodb', 'db_name')]  # connect db
            self.username = config.get('mongodb', 'username')
            self.password = config.get('mongodb', 'password')
            if self.username and self.password:
                self.connected = self.db.authenticate(self.username, self.password)
            else:
                self.connected = True
        except Exception:
            print(traceback.format_exc())
            print('Connect Statics Database Fail.')


class RedisConn(object):
    def __init__(self):
        try:
            self.pool = redis.ConnectionPool(host=config.get('redis', 'host'), port=int(config.get('redis', 'port')),
                                             db=int(config.get('redis', 'db')),
                                             password=AESProcess.decryptkey(config.get('redis', 'password')))
            self.redis_conn = redis.Redis(connection_pool=self.pool)
        except Exception as e:
            print(traceback.format_exc())
            print('Connect Redis Fail.:{}'.format(e))


class MySQLConn(object):
    def __init__(self):
        try:
            self.pool = PooledDB(pymysql, 10, host=DB_HOST, user=DB_USER, passwd=DB_PASSWORD, db=DB_DATABASE, port=DB_PORT,
                            charset="utf8")  # 10为连接池里的最少连接数
            self.conn = self.pool.connection()  # 以后每次需要数据库连接就是用connection（）函数获取连接就好了

        except Exception as e:
            print(traceback.format_exc())
            print('Connect Redis Fail.:{}'.format(e))

    def cursor(self):
        return self.conn.cursor()

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static/"),
)


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'standard': {
#             'format': '%(asctime)s [%(processName)s:%(process)d] [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] ['
#                       '%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
#     },
#
#     'filters': {
#     },
#
#     'handlers': {
#         # 'mail_admins': {
#         #     'level': 'ERROR',
#         #     'class': 'django.utils.log.AdminEmailHandler',
#         #     'include_html': True,
#         # },
#         # 'result': {
#         #     'level': 'DEBUG',
#         #     'class': 'logging.handlers.TimedRotatingFileHandler',
#         #     'filename': 'logs/ip_result.log',
#         #     'when': 'MIDNIGHT',
#         #     'backupCount': 7,
#         #     'encoding': 'utf8',
#         #     'interval': 1,
#         #     'formatter': 'standard',
#         # },
#         'default': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': 'logs/normal.log',
#             'when': 'MIDNIGHT',
#             'backupCount': 7,
#             'encoding': 'utf8',
#             'interval': 1,
#             'formatter': 'standard',
#         },
#         # 'console': {
#         #     'level': 'DEBUG',
#         #     'class': 'logging.StreamHandler',
#         #     'formatter': 'standard'
#         # },
#         'request_handler': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': 'logs/script.log',
#             'when': 'MIDNIGHT',
#             'backupCount': 7,
#             'encoding': 'utf8',
#             'interval': 1,
#             'formatter': 'standard',
#         },
#         # 'caltime_handler': {
#         #     'level': 'DEBUG',
#         #     'class': 'logging.handlers.TimedRotatingFileHandler',
#         #     'filename': 'logs/caltime.log',
#         #     'when': 'MIDNIGHT',
#         #     'backupCount': 7,
#         #     'encoding': 'utf8',
#         #     'interval': 1,
#         #     'formatter': 'standard',
#         # },
#     },
#
#     'loggers': {
#         'django': {
#             'handlers': ['default'],
#             'level': 'INFO',
#             'propagate': False
#         },
#         'django.request': {
#             'handlers': ['request_handler'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         # 'heartbeat': {
#         #     'handlers': ['heartbeat'],
#         #     'level': 'DEBUG',
#         #     'propagate': True
#         # },
#         # 'caltime': {
#         #     'handlers': ['caltime_handler'],
#         #     'level': 'INFO',
#         #     'propagate': True
#         # },
#     }
# }


if __name__ == '__main__':
    pass